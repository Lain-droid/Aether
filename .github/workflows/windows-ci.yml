name: Windows CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore and Build WPF Frontend (x64)
        working-directory: src/frontend
        run: |
          dotnet restore Aether.Frontend.csproj
          dotnet publish Aether.Frontend.csproj -c Release -r win-x64 --self-contained false -o ../../artifacts/frontend

      - name: Optional Code Signing (EXE)
        if: ${{ github.event_name != 'pull_request' }}
        env:
          CERT_PFX: ${{ secrets.CERT_PFX }}
          CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
        shell: pwsh
        run: |
          if (-not [string]::IsNullOrEmpty($env:CERT_PFX) -and -not [string]::IsNullOrEmpty($env:CERT_PASSWORD)) {
            $certPath = "$env:RUNNER_TEMP\codesign.pfx"
            Set-Content -Path $certPath -Value ([System.Convert]::FromBase64String($env:CERT_PFX)) -AsByteStream
            $files = Get-ChildItem artifacts\frontend -Filter *.exe -Recurse
            foreach ($f in $files) {
              & "C:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe" sign /f $certPath /p $env:CERT_PASSWORD /tr http://timestamp.sectigo.com /td SHA256 /fd SHA256 $f.FullName
            }
          } else { Write-Host "Code signing skipped: missing secrets" }

      - name: Build Backend (CMake x64)
        shell: pwsh
        run: |
          cmake -S . -B build -A x64
          cmake --build build --config Release
          mkdir artifacts\backend
          Copy-Item build\src\backend\Release\aether_backend.lib artifacts\backend -ErrorAction SilentlyContinue

      - name: Zip frontend artifacts
        shell: pwsh
        run: |
          Compress-Archive -Path artifacts\frontend\* -DestinationPath artifacts\Aether-frontend-win-x64.zip -Force

      - name: Setup Inno Setup
        if: ${{ always() }}
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.5
        with:
          path: scripts/installer/aether.iss
          options: /DSourceDir="artifacts/frontend" /O"artifacts/installer"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aether-artifacts
          path: |
            artifacts/frontend
            artifacts/backend
            artifacts/Aether-frontend-win-x64.zip
            artifacts/installer

      - name: ClickOnce Publish (FileSystem)
        working-directory: src/frontend
        shell: pwsh
        run: |
          dotnet publish Aether.Frontend.csproj -c Release -r win-x64 -p:PublishSingleFile=false -p:PublishProtocol=FileSystem -p:IsWebBootstrapper=false -p:GenerateManifests=true -p:PublishDir="..\\..\\artifacts\\clickonce\\" --self-contained false

      - name: Squirrel Packaging
        shell: pwsh
        run: |
          dotnet tool install --global Clowd.Squirrel --version 2.10.1
          $env:Path += ";$env:USERPROFILE\.dotnet\tools"
          mkdir artifacts\squirrel -ea 0
          if (Test-Path scripts\installer\icon.ico) { $icon = "scripts\installer\icon.ico" } else { $icon = "$env:WINDIR\System32\shell32.dll" }
          squirrel pack --packId Aether --packVersion 1.0.0 --packTitle "Aether" --icon $icon --packDir artifacts\frontend --out artifacts\squirrel

      - name: Upload Installers (ClickOnce & Squirrel)
        uses: actions/upload-artifact@v4
        with:
          name: aether-installers
          path: |
            artifacts/clickonce
            artifacts/squirrel

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aether-artifacts
          path: |
            artifacts/frontend
            artifacts/backend
